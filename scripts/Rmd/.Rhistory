filename = "../../datafiles/sessions/tutor_copilot_session_level.csv"
print(filename)
df = read.csv(filename)
library(car)
library(reshape2)
library(ggplot2)
library("lme4")
library("car")
library(lmerTest)
library(vtable)
library(tidyverse)
library(stats)
library(gplots)
library("sandwich")
library(pacman)
library(dplyr)
library(AER)
library(here)
library(readxl)
library(naniar)
library(stringr)
library(ggplot2)
library(stargazer)
library(ggalt)
library(broom)
library(sandwich)
library(lmtest)
library(scales)
library(tidyr)
library(haven)
library(googledrive)
library(semTools)
library(lavaan)
library(forcats)
library(glmnet)
library(sjPlot)
filename = "../../rawdata/sessions/tutor_copilot_session_level.csv"
print(filename)
df = read.csv(filename)
# Make into factors
df$TUTOR_COPILOT_ASSIGNMENT = factor(df$TUTOR_COPILOT_ASSIGNMENT)
# Create a new column STRATUM by concatenating SCHOOL_NAME and GRADE
df <- df %>%
mutate(STRATUM = paste(SCHOOL_NAME, GRADE, sep = "."))
df$STRATUM = factor(df$STRATUM)
df$LESSON_OBJECTIVE = factor(df$LESSON_OBJECTIVE)
df$STUDENT_ID = factor(df$STUDENT_ID)
df$TUTOR_ID = factor(df$TUTOR_ID)
df$STUDENT_TUTOR = factor(df$STUDENT_TUTOR)
summarise(df$TUTOR_IS_FEMALE)
describe(df$TUTOR_IS_FEMALE)
sum(df$TUTOR_IS_FEMALE)
df %>% group_by(TUTOR_IS_FEMALE) %>% summarise(n)
df %>% group_by(TUTOR_IS_FEMALE) %>% summarise(count)
df %>% group_by(TUTOR_IS_FEMALE) %>% summarise(n=count())
df$TUTOR_IS_FEMALE
colnames(df)
filename = "../../rawdata/sessions/tutor_copilot_session_level.csv"
print(filename)
df = read.csv(filename)
# Make into factors
df$TUTOR_COPILOT_ASSIGNMENT = factor(df$TUTOR_COPILOT_ASSIGNMENT)
# Create a new column STRATUM by concatenating SCHOOL_NAME and GRADE
df <- df %>%
mutate(STRATUM = paste(SCHOOL_NAME, GRADE, sep = "."))
df$STRATUM = factor(df$STRATUM)
df$LESSON_OBJECTIVE = factor(df$LESSON_OBJECTIVE)
df$STUDENT_ID = factor(df$STUDENT_ID)
df$TUTOR_ID = factor(df$TUTOR_ID)
df$STUDENT_TUTOR = factor(df$STUDENT_TUTOR)
# Tutor Covariates
df$TUTOR_IS_FEMALE[is.na(df$TUTOR_IS_FEMALE)]  <- 2 #missing category
df$TUTOR_IS_FEMALE = factor(df$TUTOR_IS_FEMALE)
# Student Covariates
df$STUDENT_IS_FEMALE[is.na(df$STUDENT_IS_FEMALE)]  <- 2 #missing category
df$STUDENT_IS_FEMALE = factor(df$STUDENT_IS_FEMALE)
df$STUDENT_RACE_ETHNICITY[is.na(df$STUDENT_RACE_ETHNICITY)]  <- 2 #missing category
df$STUDENT_RACE_ETHNICITY = factor(df$STUDENT_RACE_ETHNICITY)
df$STUDENT_FREE_REDUCED_LUNCH[is.na(df$STUDENT_FREE_REDUCED_LUNCH)]  <- 2 #missing category
df$STUDENT_FREE_REDUCED_LUNCH = factor(df$STUDENT_FREE_REDUCED_LUNCH)
df$STUDENT_SPECIAL_EDUCATION[is.na(df$STUDENT_SPECIAL_EDUCATION)]  <- 2 #missing category
df$STUDENT_SPECIAL_EDUCATION = factor(df$STUDENT_SPECIAL_EDUCATION)
df$STUDENT_LEP[is.na(df$STUDENT_LEP)]  <- 2 #missing category
df$STUDENT_LEP = factor(df$STUDENT_LEP)
# whether EXIT_TICKET was attempted.
df$OUTCOME_EXIT_TICKET_ATTEMPTED = ifelse(!is.na(df$EXIT_TICKET_ATTEMPETED) & df$EXIT_TICKET_ATTEMPETED != 0, 1, 0)
# whether EXIT_TICKET was passed (conditioned on it being taken; otherwise NA)
df$OUTCOME_EXIT_TICKET_PASSED <- ifelse(df$OUTCOME_EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET >= 66.66, 1,
ifelse(df$OUTCOME_EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET < 66.66, 0, NA))
# whether EXIT_TICKET was passed  -- inclusive so:
df$OUTCOME_EXIT_TICKET_PASSED_INCLUSIVE <- ifelse(df$OUTCOME_EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET >= 66.66, 1,
ifelse(df$OUTCOME_EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET < 66.66, 0, 0))
# Filter out IS_FLOATING_POOL = 1, = NA, TUTOR_LOCATION = FLT, NA
df <- df[!df$TUTOR_IS_FLOATING_POOL == 1, ]
df <- df[!df$TUTOR_IS_FLOATING_POOL == "NA", ]
df <- df[!is.na(df$TUTOR_IS_FLOATING_POOL), ]
df <- df[!df$TUTOR_LOCATION == "FLT", ]
df <- df[!df$TUTOR_LOCATION == "NA", ]
df <- df[!is.na(df$TUTOR_LOCATION), ]
columns_to_check <- c("TUTOR_COPILOT_ASSIGNMENT", "STRATUM", "STUDENT_IS_FEMALE",
"STUDENT_RACE_ETHNICITY", "STUDENT_FREE_REDUCED_LUNCH",
"STUDENT_SPECIAL_EDUCATION", "STUDENT_LEP",
"STUDENT_WINTER_MAP_2324", "TUTOR_IS_FEMALE", "TUTOR_QA_SCORE")
# Use lapply to get unique values for each column
unique_values_list <- lapply(columns_to_check, function(col) unique(df[[col]]))
# Name the list elements for better readability
names(unique_values_list) <- columns_to_check
# Print the unique values
unique_values_list
sum(is.na(df$STUDENT_WINTER_MAP_2324))
sum(is.na(df$TUTOR_QA_SCORE))
# Check unique values for each variable in the formula
for (col in c("TUTOR_COPILOT_ASSIGNMENT", "STRATUM", "STUDENT_IS_FEMALE",
"STUDENT_RACE_ETHNICITY", "STUDENT_FREE_REDUCED_LUNCH",
"STUDENT_SPECIAL_EDUCATION", "STUDENT_LEP",
"STUDENT_WINTER_MAP_2324", "TUTOR_IS_FEMALE", "TUTOR_QA_SCORE")) {
# print(col)
# print(unique(df[[col]]))
}
sumtable(df, group = "SCHOOL_NAME") # Reporting sample breakdown by school x grade
colnames(df)
filename = "../../rawdata/sessions/tutor_copilot_session_level.csv"
print(filename)
df = read.csv(filename)
# Make into factors
df$TUTOR_COPILOT_ASSIGNMENT = factor(df$TUTOR_COPILOT_ASSIGNMENT)
# Create a new column STRATUM by concatenating SCHOOL_NAME and GRADE
df <- df %>%
mutate(STRATUM = paste(SCHOOL_NAME, GRADE, sep = "."))
df$STRATUM = factor(df$STRATUM)
df$LESSON_OBJECTIVE = factor(df$LESSON_OBJECTIVE)
df$STUDENT_ID = factor(df$STUDENT_ID)
df$TUTOR_ID = factor(df$TUTOR_ID)
df$STUDENT_TUTOR = factor(df$STUDENT_TUTOR)
# Tutor Covariates
df$TUTOR_IS_FEMALE[is.na(df$TUTOR_IS_FEMALE)]  <- 2 #missing category
df$TUTOR_IS_FEMALE = factor(df$TUTOR_IS_FEMALE)
# Student Covariates
df$STUDENT_IS_FEMALE[is.na(df$STUDENT_IS_FEMALE)]  <- 2 #missing category
df$STUDENT_IS_FEMALE = factor(df$STUDENT_IS_FEMALE)
df$STUDENT_RACE_ETHNICITY[is.na(df$STUDENT_RACE_ETHNICITY)]  <- 2 #missing category
df$STUDENT_RACE_ETHNICITY = factor(df$STUDENT_RACE_ETHNICITY)
df$STUDENT_FREE_REDUCED_LUNCH[is.na(df$STUDENT_FREE_REDUCED_LUNCH)]  <- 2 #missing category
df$STUDENT_FREE_REDUCED_LUNCH = factor(df$STUDENT_FREE_REDUCED_LUNCH)
df$STUDENT_SPECIAL_EDUCATION[is.na(df$STUDENT_SPECIAL_EDUCATION)]  <- 2 #missing category
df$STUDENT_SPECIAL_EDUCATION = factor(df$STUDENT_SPECIAL_EDUCATION)
df$STUDENT_LEP[is.na(df$STUDENT_LEP)]  <- 2 #missing category
df$STUDENT_LEP = factor(df$STUDENT_LEP)
# whether EXIT_TICKET was attempted.
df$EXIT_TICKET_ATTEMPTED = ifelse(!is.na(df$EXIT_TICKET_ATTEMPETED) & df$EXIT_TICKET_ATTEMPETED != 0, 1, 0)
# whether EXIT_TICKET was passed (conditioned on it being taken; otherwise NA)
df$EXIT_TICKET_PASSED <- ifelse(df$OUTCOME_EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET >= 66.66, 1,
ifelse(df$OUTCOME_EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET < 66.66, 0, NA))
filename = "../../rawdata/sessions/tutor_copilot_session_level.csv"
print(filename)
df = read.csv(filename)
# Make into factors
df$TUTOR_COPILOT_ASSIGNMENT = factor(df$TUTOR_COPILOT_ASSIGNMENT)
# Create a new column STRATUM by concatenating SCHOOL_NAME and GRADE
df <- df %>%
mutate(STRATUM = paste(SCHOOL_NAME, GRADE, sep = "."))
df$STRATUM = factor(df$STRATUM)
df$LESSON_OBJECTIVE = factor(df$LESSON_OBJECTIVE)
df$STUDENT_ID = factor(df$STUDENT_ID)
df$TUTOR_ID = factor(df$TUTOR_ID)
df$STUDENT_TUTOR = factor(df$STUDENT_TUTOR)
# Tutor Covariates
df$TUTOR_IS_FEMALE[is.na(df$TUTOR_IS_FEMALE)]  <- 2 #missing category
df$TUTOR_IS_FEMALE = factor(df$TUTOR_IS_FEMALE)
# Student Covariates
df$STUDENT_IS_FEMALE[is.na(df$STUDENT_IS_FEMALE)]  <- 2 #missing category
df$STUDENT_IS_FEMALE = factor(df$STUDENT_IS_FEMALE)
df$STUDENT_RACE_ETHNICITY[is.na(df$STUDENT_RACE_ETHNICITY)]  <- 2 #missing category
df$STUDENT_RACE_ETHNICITY = factor(df$STUDENT_RACE_ETHNICITY)
df$STUDENT_FREE_REDUCED_LUNCH[is.na(df$STUDENT_FREE_REDUCED_LUNCH)]  <- 2 #missing category
df$STUDENT_FREE_REDUCED_LUNCH = factor(df$STUDENT_FREE_REDUCED_LUNCH)
df$STUDENT_SPECIAL_EDUCATION[is.na(df$STUDENT_SPECIAL_EDUCATION)]  <- 2 #missing category
df$STUDENT_SPECIAL_EDUCATION = factor(df$STUDENT_SPECIAL_EDUCATION)
df$STUDENT_LEP[is.na(df$STUDENT_LEP)]  <- 2 #missing category
df$STUDENT_LEP = factor(df$STUDENT_LEP)
# whether EXIT_TICKET was attempted.
df$EXIT_TICKET_ATTEMPTED = ifelse(!is.na(df$EXIT_TICKET_ATTEMPETED) & df$EXIT_TICKET_ATTEMPETED != 0, 1, 0)
# whether EXIT_TICKET was passed (conditioned on it being taken; otherwise NA)
df$EXIT_TICKET_PASSED <- ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET >= 66.66, 1,
ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET < 66.66, 0, NA))
# whether EXIT_TICKET was passed  -- inclusive so:
df$EXIT_TICKET_PASSED_INCLUSIVE <- ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET >= 66.66, 1,
ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET < 66.66, 0, 0))
# Filter out IS_FLOATING_POOL = 1, = NA, TUTOR_LOCATION = FLT, NA
df <- df[!df$TUTOR_IS_FLOATING_POOL == 1, ]
df <- df[!df$TUTOR_IS_FLOATING_POOL == "NA", ]
df <- df[!is.na(df$TUTOR_IS_FLOATING_POOL), ]
df <- df[!df$TUTOR_LOCATION == "FLT", ]
df <- df[!df$TUTOR_LOCATION == "NA", ]
df <- df[!is.na(df$TUTOR_LOCATION), ]
df <- select(df, "ACADEMIC_YEAR", "SESSION_ID", "STUDENT_ID", "TUTOR_ID", "SESSION_DATE", "STUDY_DATE",
"PARTICIPATION_POINTS", "PARTICIPATION_POINTS_STANDARDIZED", "EXIT_TICKET_ATTEMPTED",
"EXIT_TICKET_PASSED", "EXIT_TICKET_PASSED_INCLUSIVE", "TUTOR_RATING", "SESSION_RATING",
"STUDENT_SURVEY_UNDERSTANDING_OVER_MEMORIZATION", "STUDENT_SURVEY_KNOW_CAN_LEARN",
"STUDENT_SURVEY_TUTOR_CARED_ABOUT_MATH", "TUTOR_SURVEY_COPILOT_EASY_TO_USE",
"TUTOR_SURVEY_COPILOT_HELPFUL", "TUTOR_SURVEY_COPILOT_LIKELY_TO_RECOMMEND",
"NUM_TUTOR_COPILOT_USE", "USED_TUTOR_COPILOT", "STUDENT_TUTOR", "TUTOR_COPILOT_ASSIGNMENT",
"STRATUM", "GRADE", "SCHOOL_ID", "STUDENT_IS_FEMALE", "STUDENT_RACE_ETHNICITY",
"STUDENT_FREE_REDUCED_LUNCH", "STUDENT_SPECIAL_EDUCATION", "STUDENT_LEP",
"STUDENT_WINTER_MAP_2324", "TUTOR_IS_FEMALE", "TUTOR_QA_SCORE")
write.csv(df,"../../datafiles/filtered_copilot_data.csv", row.names = FALSE)
columns_to_check <- c("TUTOR_COPILOT_ASSIGNMENT", "STRATUM", "STUDENT_IS_FEMALE",
"STUDENT_RACE_ETHNICITY", "STUDENT_FREE_REDUCED_LUNCH",
"STUDENT_SPECIAL_EDUCATION", "STUDENT_LEP",
"STUDENT_WINTER_MAP_2324", "TUTOR_IS_FEMALE", "TUTOR_QA_SCORE")
# Use lapply to get unique values for each column
unique_values_list <- lapply(columns_to_check, function(col) unique(df[[col]]))
# Name the list elements for better readability
names(unique_values_list) <- columns_to_check
# Print the unique values
unique_values_list
sum(is.na(df$STUDENT_WINTER_MAP_2324))
sum(is.na(df$TUTOR_QA_SCORE))
sumtable(df, group = "SCHOOL_NAME") # Reporting sample breakdown by school x grade
sumtable(df, group = "SCHOOL_ID") # Reporting sample breakdown by school x grade
cols <- c("SCHOOL_ID", "GRADE")
summary(df[cols,])
df %>%
group_by(SCHOOL_ID, GRADE) %>%
summarize(
count = n(),
)
# Student statistics
df %>%
group_by(GRADE) %>%
summarize(
unique_student_count = n_distinct(STUDENT_ID)
)
# Filter out IS_FLOATING_POOL = 1, = NA, TUTOR_LOCATION = FLT, NA
df <- df[!df$TUTOR_IS_FLOATING_POOL == 1, ]
df <- df[!df$TUTOR_IS_FLOATING_POOL == "NA", ]
df <- df[!is.na(df$TUTOR_IS_FLOATING_POOL), ]
df <- df[!df$TUTOR_LOCATION == "FLT", ]
df <- df[!df$TUTOR_LOCATION == "NA", ]
df <- df[!is.na(df$TUTOR_LOCATION), ]
df <- select(df, "ACADEMIC_YEAR", "SESSION_ID", "STUDENT_ID", "TUTOR_ID", "SESSION_DATE", "STUDY_DATE",
"PARTICIPATION_POINTS", "PARTICIPATION_POINTS_STANDARDIZED", "EXIT_TICKET_ATTEMPTED",
"EXIT_TICKET_PASSED", "EXIT_TICKET_PASSED_INCLUSIVE", "TUTOR_RATING", "SESSION_RATING",
"STUDENT_SURVEY_UNDERSTANDING_OVER_MEMORIZATION", "STUDENT_SURVEY_KNOW_CAN_LEARN",
"STUDENT_SURVEY_TUTOR_CARED_ABOUT_MATH", "TUTOR_SURVEY_COPILOT_EASY_TO_USE",
"TUTOR_SURVEY_COPILOT_HELPFUL", "TUTOR_SURVEY_COPILOT_LIKELY_TO_RECOMMEND",
"NUM_TUTOR_COPILOT_USE", "USED_TUTOR_COPILOT", "STUDENT_TUTOR", "TUTOR_COPILOT_ASSIGNMENT",
"STRATUM", "GRADE", "SCHOOL_NAME", "STUDENT_IS_FEMALE", "STUDENT_RACE_ETHNICITY",
"STUDENT_FREE_REDUCED_LUNCH", "STUDENT_SPECIAL_EDUCATION", "STUDENT_LEP",
"STUDENT_WINTER_MAP_2324", "TUTOR_IS_FEMALE", "TUTOR_QA_SCORE")
filename = "../../rawdata/sessions/tutor_copilot_session_level.csv"
print(filename)
df = read.csv(filename)
# Make into factors
df$TUTOR_COPILOT_ASSIGNMENT = factor(df$TUTOR_COPILOT_ASSIGNMENT)
# Create a new column STRATUM by concatenating SCHOOL_NAME and GRADE
df <- df %>%
mutate(STRATUM = paste(SCHOOL_NAME, GRADE, sep = "."))
df$STRATUM = factor(df$STRATUM)
df$LESSON_OBJECTIVE = factor(df$LESSON_OBJECTIVE)
df$STUDENT_ID = factor(df$STUDENT_ID)
df$TUTOR_ID = factor(df$TUTOR_ID)
df$STUDENT_TUTOR = factor(df$STUDENT_TUTOR)
# Tutor Covariates
df$TUTOR_IS_FEMALE[is.na(df$TUTOR_IS_FEMALE)]  <- 2 #missing category
df$TUTOR_IS_FEMALE = factor(df$TUTOR_IS_FEMALE)
# Student Covariates
df$STUDENT_IS_FEMALE[is.na(df$STUDENT_IS_FEMALE)]  <- 2 #missing category
df$STUDENT_IS_FEMALE = factor(df$STUDENT_IS_FEMALE)
df$STUDENT_RACE_ETHNICITY[is.na(df$STUDENT_RACE_ETHNICITY)]  <- 2 #missing category
df$STUDENT_RACE_ETHNICITY = factor(df$STUDENT_RACE_ETHNICITY)
df$STUDENT_FREE_REDUCED_LUNCH[is.na(df$STUDENT_FREE_REDUCED_LUNCH)]  <- 2 #missing category
df$STUDENT_FREE_REDUCED_LUNCH = factor(df$STUDENT_FREE_REDUCED_LUNCH)
df$STUDENT_SPECIAL_EDUCATION[is.na(df$STUDENT_SPECIAL_EDUCATION)]  <- 2 #missing category
df$STUDENT_SPECIAL_EDUCATION = factor(df$STUDENT_SPECIAL_EDUCATION)
df$STUDENT_LEP[is.na(df$STUDENT_LEP)]  <- 2 #missing category
df$STUDENT_LEP = factor(df$STUDENT_LEP)
# whether EXIT_TICKET was attempted.
df$EXIT_TICKET_ATTEMPTED = ifelse(!is.na(df$EXIT_TICKET_ATTEMPETED) & df$EXIT_TICKET_ATTEMPETED != 0, 1, 0)
# whether EXIT_TICKET was passed (conditioned on it being taken; otherwise NA)
df$EXIT_TICKET_PASSED <- ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET >= 66.66, 1,
ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET < 66.66, 0, NA))
# whether EXIT_TICKET was passed  -- inclusive so:
df$EXIT_TICKET_PASSED_INCLUSIVE <- ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET >= 66.66, 1,
ifelse(df$EXIT_TICKET_ATTEMPTED == 1 & df$EXIT_TICKET < 66.66, 0, 0))
# Filter out IS_FLOATING_POOL = 1, = NA, TUTOR_LOCATION = FLT, NA
df <- df[!df$TUTOR_IS_FLOATING_POOL == 1, ]
df <- df[!df$TUTOR_IS_FLOATING_POOL == "NA", ]
df <- df[!is.na(df$TUTOR_IS_FLOATING_POOL), ]
df <- df[!df$TUTOR_LOCATION == "FLT", ]
df <- df[!df$TUTOR_LOCATION == "NA", ]
df <- df[!is.na(df$TUTOR_LOCATION), ]
df <- select(df, "ACADEMIC_YEAR", "SESSION_ID", "STUDENT_ID", "TUTOR_ID", "SESSION_DATE", "STUDY_DATE",
"PARTICIPATION_POINTS", "PARTICIPATION_POINTS_STANDARDIZED", "EXIT_TICKET_ATTEMPTED",
"EXIT_TICKET_PASSED", "EXIT_TICKET_PASSED_INCLUSIVE", "TUTOR_RATING", "SESSION_RATING",
"STUDENT_SURVEY_UNDERSTANDING_OVER_MEMORIZATION", "STUDENT_SURVEY_KNOW_CAN_LEARN",
"STUDENT_SURVEY_TUTOR_CARED_ABOUT_MATH", "TUTOR_SURVEY_COPILOT_EASY_TO_USE",
"TUTOR_SURVEY_COPILOT_HELPFUL", "TUTOR_SURVEY_COPILOT_LIKELY_TO_RECOMMEND",
"NUM_TUTOR_COPILOT_USE", "USED_TUTOR_COPILOT", "STUDENT_TUTOR", "TUTOR_COPILOT_ASSIGNMENT",
"STRATUM", "GRADE", "SCHOOL_NAME", "STUDENT_IS_FEMALE", "STUDENT_RACE_ETHNICITY",
"STUDENT_FREE_REDUCED_LUNCH", "STUDENT_SPECIAL_EDUCATION", "STUDENT_LEP",
"STUDENT_WINTER_MAP_2324", "TUTOR_IS_FEMALE", "TUTOR_QA_SCORE")
write.csv(df,"../../datafiles/filtered_copilot_data.csv", row.names = FALSE)
columns_to_check <- c("TUTOR_COPILOT_ASSIGNMENT", "STRATUM", "STUDENT_IS_FEMALE",
"STUDENT_RACE_ETHNICITY", "STUDENT_FREE_REDUCED_LUNCH",
"STUDENT_SPECIAL_EDUCATION", "STUDENT_LEP",
"STUDENT_WINTER_MAP_2324", "TUTOR_IS_FEMALE", "TUTOR_QA_SCORE")
# Use lapply to get unique values for each column
unique_values_list <- lapply(columns_to_check, function(col) unique(df[[col]]))
# Name the list elements for better readability
names(unique_values_list) <- columns_to_check
# Print the unique values
unique_values_list
sum(is.na(df$STUDENT_WINTER_MAP_2324))
sum(is.na(df$TUTOR_QA_SCORE))
sumtable(df, group = "SCHOOL_NAME") # Reporting sample breakdown by school x grade
cols <- c("SCHOOL_NAME", "GRADE")
summary(df[cols,])
df %>%
group_by(SCHOOL_NAME, GRADE) %>%
summarize(
count = n(),
)
# Student statistics
df %>%
group_by(GRADE) %>%
summarize(
unique_student_count = n_distinct(STUDENT_ID)
)
# Raw numbers
session_count_plot<-ggplot(df, aes(x = STUDY_DATE, fill = TUTOR_COPILOT_ASSIGNMENT)) +
geom_bar(width = 0.7) +
scale_fill_manual(values = c("CONTROL" = "#faa54a", "TREATMENT" = "#4285F4"),
labels = c("CONTROL" = "Control", "TREATMENT" = "Treatment"),
name = "Assignment Type") +
labs(title = "Number of Tutoring Sessions per day",
subtitle = "With and Without Tutor Copilot Enabled",
x = "Study Date",
y = "Session count")+
ylim(0, 270) + # <-edit
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 20)),
axis.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
session_count_plot
ggsave("../../output/fig_session_count.png", plot = session_count_plot, width = 10, height = 6, units = "in")
# Proportion
percentage_df <- df %>%
group_by(STUDY_DATE, TUTOR_COPILOT_ASSIGNMENT) %>%
summarise(count = n()) %>%
mutate(total = sum(count)) %>%
ungroup() %>%
mutate(percentage = count / total * 100)
ggplot(percentage_df, aes(x = STUDY_DATE, y = percentage, fill = TUTOR_COPILOT_ASSIGNMENT)) +
geom_bar(stat = "identity") +
labs(title = "Percentage of Sessions by Assignment Over Time",
x = "Study Date",
y = "Percentage of Sessions",
fill = "Assignment") +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df %>%
group_by(STUDY_DATE) %>%
summarise(
Count = n(),
)
treatment_df = df[df$TUTOR_COPILOT_ASSIGNMENT == "TREATMENT", ]
nonzero_treatment_df = df[df$NUM_TUTOR_COPILOT_USE != 0, ]
# Calculate the average USED_TUTOR_COPILOT for each STUDY_DATE
average_usage_df <- treatment_df %>%
group_by(STUDY_DATE) %>%
summarise(
average_clicked = mean(USED_TUTOR_COPILOT, na.rm = TRUE),
average_num_clicks = mean(NUM_TUTOR_COPILOT_USE, na.rm = TRUE),
sem_num_clicks = sd(NUM_TUTOR_COPILOT_USE, na.rm = TRUE) / sqrt(n())
)
average_nonzero_usage_df <- nonzero_treatment_df %>%
group_by(STUDY_DATE) %>%
summarise(
average_clicked = mean(USED_TUTOR_COPILOT, na.rm = TRUE),
average_num_clicks = mean(NUM_TUTOR_COPILOT_USE, na.rm = TRUE),
sem_num_clicks = sd(NUM_TUTOR_COPILOT_USE, na.rm = TRUE) / sqrt(n())
)
average_usage_df$average_clicked_p <- average_usage_df$average_clicked*100
tutor_copilot_plot <- ggplot(average_usage_df, aes(x = STUDY_DATE, y = average_clicked_p)) +
geom_col(fill = "#4285F4", width = 0.7) +
geom_text(aes(label = scales::percent(average_clicked, accuracy = 1)),
vjust = -0.5, size = 3, color = "#4285F4") +
labs(title = "Tutor Copilot Usage Over Time",
subtitle = "Percentage of Sessions Using Tutor Copilot",
x = "Study Date",
y = "Percentage of Sessions")+
ylim(0, 60) + # <-edit
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 20)),
axis.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
mean(average_usage_df$average_clicked) # 28.7
tutor_copilot_plot
ggsave("../../output/fig_session_perc_use.png", plot = tutor_copilot_plot, width = 10, height = 6, units = "in")
ggplot(average_usage_df, aes(x = STUDY_DATE, y = average_num_clicks)) +
geom_bar(stat = "identity", fill = "blue") +
geom_errorbar(aes(ymin = average_num_clicks - sem_num_clicks, ymax = average_num_clicks + sem_num_clicks), width = 0.2) +
labs(title = "Average Num Clicks of Tutor Copilot Over Date",
x = "Study Date",
y = "Average Num Clicks Tutor Copilot") +
theme_minimal()
tutor_copilot_plot <- ggplot(average_usage_df, aes(x = STUDY_DATE, y = average_num_clicks)) +
geom_col(fill = "#4285F4", width = 0.7) +
geom_errorbar(aes(ymin = average_num_clicks - sem_num_clicks,
ymax = average_num_clicks + sem_num_clicks),
width = 0.2, color = "#1A237E") +
geom_text(aes(label = round(average_num_clicks, 1)),
vjust = -0.5, size = 3, color = "#4285F4") +
labs(title = "Average Number of Tutor Copilot Uses Over Time",
subtitle = "Included Zero-Use Sessions",
x = "Study Date",
y = "Average Number of Clicks") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 20)),
axis.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
mean(average_usage_df$average_num_clicks) # 2.81
ggsave("../../output/fig_session_numclicks.png", plot = tutor_copilot_plot, width = 10, height = 6, units = "in")
ggplot(average_nonzero_usage_df, aes(x = STUDY_DATE, y = average_num_clicks)) +
geom_bar(stat = "identity", fill = "blue") +
geom_errorbar(aes(ymin = average_num_clicks - sem_num_clicks, ymax = average_num_clicks + sem_num_clicks), width = 0.2) +
labs(title = "(Non-Zero) Average Num Clicks of Tutor Copilot Over Date",
x = "Study Date",
y = "Average Num Clicks Tutor Copilot") +
theme_minimal()
mean(average_nonzero_usage_df$average_num_clicks) # 9.62
tutor_copilot_plot <- ggplot(average_nonzero_usage_df, aes(x = STUDY_DATE, y = average_num_clicks)) +
geom_col(fill = "#4285F4", width = 0.7) +
geom_errorbar(aes(ymin = average_num_clicks - sem_num_clicks,
ymax = average_num_clicks + sem_num_clicks),
width = 0.2, color = "#1A237E") +
geom_text(aes(label = round(average_num_clicks, 1)),
vjust = -0.5, size = 3, color = "#4285F4") +
labs(title = "Average Number of Tutor Copilot Uses Over Time",
subtitle = "Excluded Zero-Use Sessions",
x = "Study Date",
y = "Average Number of Clicks") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 20)),
axis.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
ggsave("../../results/fig_session_avgclicks_uncond.png", plot = tutor_copilot_plot, width = 10, height = 6, units = "in")
ggplot(average_nonzero_usage_df, aes(x = STUDY_DATE, y = average_num_clicks)) +
geom_bar(stat = "identity", fill = "blue") +
geom_errorbar(aes(ymin = average_num_clicks - sem_num_clicks, ymax = average_num_clicks + sem_num_clicks), width = 0.2) +
labs(title = "(Non-Zero) Average Num Clicks of Tutor Copilot Over Date",
x = "Study Date",
y = "Average Num Clicks Tutor Copilot") +
theme_minimal()
mean(average_nonzero_usage_df$average_num_clicks) # 9.62
tutor_copilot_plot <- ggplot(average_nonzero_usage_df, aes(x = STUDY_DATE, y = average_num_clicks)) +
geom_col(fill = "#4285F4", width = 0.7) +
geom_errorbar(aes(ymin = average_num_clicks - sem_num_clicks,
ymax = average_num_clicks + sem_num_clicks),
width = 0.2, color = "#1A237E") +
geom_text(aes(label = round(average_num_clicks, 1)),
vjust = -0.5, size = 3, color = "#4285F4") +
labs(title = "Average Number of Tutor Copilot Uses Over Time",
subtitle = "Excluded Zero-Use Sessions",
x = "Study Date",
y = "Average Number of Clicks") +
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 20)),
axis.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
ggsave("../../output/fig_session_avgclicks_uncond.png", plot = tutor_copilot_plot, width = 10, height = 6, units = "in")
